{
  "int": {
    "Id": "int",
    "description": "Signed Integer",
    "type": "primitive",
    "bitInterval": {
      "min": "-2147483648",
      "max": "2147483647"
    },
    "regex": "int\\s+(?<identifier>(?!\\d)[a-zA-Z_0-9]{1,50})(\\s*=\\s*(?<value>(?<sign>-?)\\d{1,15}))?\\s*(?<delimiter>;)"
  },
  "number": {
    "Id": "number",
    "description": "Signed float number",
    "type": "primitive",
    "bitInterval": {
      "min": "-2147483648",
      "max": "2147483647"
    },
    "regex": "number\\s+(?<identifier>(?!\\d)[a-zA-Z_0-9]{1,50})(\\s*=\\s*(?<value>(-?)\\d{1,15}(\\.\\d{1,15})?))?\\s*(?<delimiter>;)"
  },
  "char": {
    "Id": "char",
    "description": "Character alphanumeric",
    "type": "primitive",
    "bitInterval": {
      "min": "-2147483648",
      "max": "2147483647"
    },
    "regex": ""
  },
  "text": {
    "Id": "text",
    "description": "Characters string",
    "type": "primitive",
    "regex": ""
  },
  "bool": {
    "Id": "bool",
    "description": "Boolean",
    "type": "primitive",
    "values": [ "true", "false", "0", "1" ],
    "regex": ""
  },
  "date": {
    "Id": "date",
    "description": "date and time",
    "type": "primitive",
    "regex": ""
  },
  "*": {
    "Id": "*",
    "description": "multiplication",
    "type": "arithmetic",
    "regex": "\\d+\\s*\\*\\s*\\d+",
    "weight": "0"
  },
  "/": {
    "Id": "/",
    "description": "division",
    "type": "arithmetic",
    "regex": "\\d+\\s*/\\s*\\d+",
    "weight": "1",
    "escaped": "/"
  },
  "%": {
    "Id": "%",
    "description": "Module",
    "type": "arithmetic",
    "regex": "\\d+\\s*%\\s*\\d+",
    "weight": "3"
  },
  "+": {
    "Id": "+",
    "description": "Addition",
    "type": "arithmetic",
    "regex": "\\d+\\s*\\+\\s*\\d+",
    "weight": "4"
  },
  "-": {
    "Id": "-",
    "description": "Substraction",
    "type": "arithmetic",
    "regex": "\\d+\\s*-\\s*\\d+",
    "weight": "5",
    "escaped": "\\-"
  },
  "=": {
    "Id": "=",
    "description": "Assigment",
    "type": "assigment",
    "regex": ""
  },
  "+=": {
    "Id": "+=",
    "description": "Increment",
    "type": "assigment",
    "regex": ""
  },
  "-=": {
    "Id": "-=",
    "description": "Decrement",
    "type": "assigment",
    "regex": ""
  },
  "*=": {
    "Id": "*=",
    "description": "Multiplication",
    "type": "assigment",
    "regex": ""
  },
  "equals": {
    "Id": "equals",
    "description": "Equality",
    "type": "comparation",
    "regex": ""
  },
  "not=": {
    "Id": "not=",
    "description": "Non Equality",
    "type": "comparation",
    "regex": ""
  },
  "&&": {
    "Id": "&&",
    "description": "And",
    "type": "logic",
    "regex": ""
  },
  "|": {
    "Id": "|",
    "description": "Or",
    "type": "logic",
    "regex": ""
  },
  "if": {
    "Id": "if",
    "description": "flow",
    "type": "conditional",
    "regex": "if\\s*\\(\\s*(((((?!\\\\d)[a-zA-Z_0-9]{1,50}))\\s*(equals|not=)\\s*[a-zA-Z0-9.\\d]+)|(((?!\\\\d)[a-zA-Z_0-9]{1,50})))\\s*\\)\\s*\\n?\\{(?<body>(.|\\n|(|)|{|}|\\s)*)\\}"
  },
  "for": {
    "Id": "for",
    "description": "Cicle with counter",
    "type": "loop",
    "regex": "for\\s*\\(\\s*(int\\s+)?((?!\\\\d)[a-zA-Z_0-9]{1,50})\\s*(=\\s*\\d*)\\s*;\\s*((?!\\\\d)[a-zA-Z_0-9]{1,50})\\s*(=|>=|<=|<|>)\\s*((((?!\\\\d)[a-zA-Z_0-9]{1,50}))|\\d)\\s*;\\s*((?!\\\\d)[a-zA-Z_0-9]{1,50})(\\+\\+|--)\\s*\\)\\s*\\n?\\{((.|\\n|(|)|{|}|\\s)*)\\}"
  },
  "while": {
    "Id": "while",
    "description": "conditional Cicle",
    "type": "loop",
    "regex": "while\\s*\\(\\s*(((((?!\\\\d)[a-zA-Z_0-9]{1,50}))\\s*(equals|not=)\\s*[a-zA-Z0-9.\\d]+)|(((?!\\\\d)[a-zA-Z_0-9]{1,50})))\\s*\\)\\s*\\n?\\{((.|\\n|(|)|{|}|\\s)*)\\}"
  },
  ";": {
    "Id": ";",
    "description": "Delimiter",
    "type": "delimiter"
  },
  "{": {
    "Id": "{",
    "description": "Open Block Delimiter",
    "type": "OpenBlockDelimiter"
  },
  "}": {
    "Id": "}",
    "description": "Close Block Delimiter",
    "type": "CloseBlockDelimiter"
  },
  "(": {
    "Id": "(",
    "description": "Open Agrouper",
    "type": "OpenGrouper"
  },
  ")": {
    "Id": ")",
    "description": "Close Agrouper",
    "type": "CloseGrouper"
  },
  "--": {
    "Id": "--",
    "description": "Single Line Comment",
    "type": "SingleLineComment",
    "regex": "^--.*"
  },
  "-*": {
    "Id": "-*",
    "description": "Multiple Line Comment",
    "type": "OpenMultiLineComment"
  },
  "*-": {
    "Id": "*-",
    "description": "Multple Line Comment",
    "type": "ClosenMultiLineComment",
    "regex": "^-\\*((.|\\n|\\s)*)\\*-$"
  }
}